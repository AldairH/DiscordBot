const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { Player } = require('discord-player');
const { YoutubeiExtractor } = require('@discord-player/extractor');

const TOKEN = process.env.DISCORD_TOKEN;
const ALLOWED_SERVERS = ['869299042612563968'];

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.MessageContent
    ]
});

// Discord-player con opciones anti-bloqueo
const player = new Player(client, {
    ytdlOptions: {
        quality: 'highestaudio',
        highWaterMark: 1 << 25,
        requestOptions: {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Encoding': 'gzip, deflate',
                'DNT': '1',
                'Connection': 'keep-alive'
            }
        }
    },
    skipFFmpeg: false,
    // Configuraciones adicionales para evitar bloqueos
    extractorRetryLimit: 3,  // Reintentos autom√°ticos
    extractorTimeout: 30000, // Timeout de 30 segundos
});

// Registrar extractores con configuraci√≥n mejorada
async function setupExtractors() {
    try {
        // Extractor de YouTube mejorado
        await player.extractors.register(YoutubeiExtractor, {
            authentication: process.env.YOUTUBE_COOKIE || undefined, // Opcional: cookies de YouTube
        });
        
        // Cargar extractores por defecto
        await player.extractors.loadDefault((ext) => ext !== 'YouTubeExtractor');
        console.log('‚úÖ Extractores cargados exitosamente');
    } catch (error) {
        console.error('‚ö†Ô∏è Error cargando extractores:', error.message);
        console.log('üìù Continuando con extractores b√°sicos...');
    }
}

// Funciones de utilidad (mantener las mismas)
function createErrorEmbed(title, description) {
    return new EmbedBuilder()
        .setColor('#ff0000')
        .setTitle(`‚ùå ${title}`)
        .setDescription(description);
}

function createSuccessEmbed(title, description) {
    return new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle(`‚úÖ ${title}`)
        .setDescription(description);
}

function createInfoEmbed(title, description) {
    return new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle(`‚ÑπÔ∏è ${title}`)
        .setDescription(description);
}

// Eventos del reproductor con manejo mejorado de errores
player.events.on('audioTrackAdd', (queue, track) => {
    const embed = createSuccessEmbed('Canci√≥n a√±adida', 
        `**${track.title}**\n` +
        `üë§ ${track.author}\n` +
        `‚è±Ô∏è ${track.duration}\n` +
        `üìç Posici√≥n: ${queue.tracks.data.length}`
    );
    
    if (track.thumbnail) embed.setThumbnail(track.thumbnail);
    queue.metadata.send({ embeds: [embed] });
});

player.events.on('audioTracksAdd', (queue, tracks) => {
    const embed = createSuccessEmbed('Playlist a√±adida', 
        `Se a√±adieron **${tracks.length}** canciones a la cola`
    );
    queue.metadata.send({ embeds: [embed] });
});

player.events.on('playerStart', (queue, track) => {
    const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('üéµ Reproduciendo ahora')
        .setDescription(`**${track.title}**`)
        .addFields(
            { name: 'üë§ Autor', value: track.author, inline: true },
            { name: '‚è±Ô∏è Duraci√≥n', value: track.duration, inline: true },
            { name: 'üìù Cola', value: `${queue.tracks.data.length} canci√≥n(es) restante(s)`, inline: true }
        );

    if (track.thumbnail) embed.setThumbnail(track.thumbnail);

    const controlRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('pause')
                .setLabel('‚è∏Ô∏è Pausar')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('skip')
                .setLabel('‚è≠Ô∏è Saltar')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('stop')
                .setLabel('‚èπÔ∏è Parar')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('loop')
                .setLabel(queue.repeatMode === 1 ? 'üîÅ Loop ON' : 'üîÅ Loop OFF')
                .setStyle(queue.repeatMode === 1 ? ButtonStyle.Success : ButtonStyle.Secondary)
        );

    queue.metadata.send({ embeds: [embed], components: [controlRow] });
});

player.events.on('emptyQueue', (queue) => {
    const embed = createInfoEmbed('Cola vac√≠a', 'No hay m√°s canciones en la cola.');
    queue.metadata.send({ embeds: [embed] });
});

// Manejo mejorado de errores con reintentos autom√°ticos
player.events.on('error', (queue, error) => {
    console.error('Error en discord-player:', error.message);
    
    const isYouTubeError = error.message.includes('Sign in') || 
                          error.message.includes('blocked') ||
                          error.message.includes('unavailable') ||
                          error.message.includes('403') ||
                          error.message.includes('429');
    
    if (isYouTubeError) {
        const embed = createErrorEmbed('üõ°Ô∏è Bloqueo detectado', 
            'YouTube bloque√≥ temporalmente las solicitudes.\n' +
            'üîÑ Intentando con m√©todo alternativo...'
        );
        queue.metadata.send({ embeds: [embed] });
        
        // Reintentar con configuraci√≥n diferente despu√©s de 5 segundos
        setTimeout(async () => {
            if (queue.tracks.data.length > 0) {
                try {
                    await queue.node.skip();
                } catch (skipError) {
                    console.error('Error al saltar:', skipError);
                }
            }
        }, 5000);
    } else {
        const embed = createErrorEmbed('Error de reproducci√≥n', 
            `${error.message.substring(0, 100)}${error.message.length > 100 ? '...' : ''}`
        );
        queue.metadata.send({ embeds: [embed] });
    }
});

player.events.on('playerError', (queue, error) => {
    console.error('Error del reproductor:', error.message);
    
    const embed = createErrorEmbed('Error del reproductor', 
        'Hubo un problema con la reproducci√≥n. Saltando a la siguiente...'
    );
    queue.metadata.send({ embeds: [embed] });
});

client.once('ready', async () => {
    console.log(`ü§ñ ${client.user.tag} est√° conectado!`);
    
    // Configurar extractores
    await setupExtractors();
    
    const commands = [
        new SlashCommandBuilder()
            .setName('play')
            .setDescription('Reproduce una canci√≥n')
            .addStringOption(option =>
                option.setName('cancion')
                    .setDescription('Nombre de la canci√≥n o URL de YouTube')
                    .setRequired(true)
            ),
        new SlashCommandBuilder()
            .setName('skip')
            .setDescription('Salta a la siguiente canci√≥n'),
        new SlashCommandBuilder()
            .setName('stop')
            .setDescription('Para la m√∫sica y limpia la cola'),
        new SlashCommandBuilder()
            .setName('queue')
            .setDescription('Muestra la cola actual'),
        new SlashCommandBuilder()
            .setName('pause')
            .setDescription('Pausa/reanuda la m√∫sica'),
        new SlashCommandBuilder()
            .setName('loop')
            .setDescription('Activa/desactiva el loop de la canci√≥n actual'),
        new SlashCommandBuilder()
            .setName('shuffle')
            .setDescription('Mezcla la cola aleatoriamente'),
        new SlashCommandBuilder()
            .setName('clear')
            .setDescription('Limpia la cola de m√∫sica'),
        new SlashCommandBuilder()
            .setName('disconnect')
            .setDescription('Desconecta el bot del canal de voz')
    ];

    try {
        for (const guildId of ALLOWED_SERVERS) {
            const guild = client.guilds.cache.get(guildId);
            if (guild) {
                await guild.commands.set(commands);
                console.log(`‚úÖ Comandos registrados en ${guild.name}`);
            }
        }
    } catch (error) {
        console.error('Error registrando comandos:', error);
    }
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (!ALLOWED_SERVERS.includes(interaction.guildId)) {
        return interaction.reply({ 
            content: '‚ùå Este bot no est√° autorizado en este servidor.',
            ephemeral: true 
        });
    }

    const { commandName, options, member, guild, channel } = interaction;

    if (!member.voice.channel && ['play', 'skip', 'stop', 'pause'].includes(commandName)) {
        return interaction.reply({ 
            content: '‚ùå Debes estar en un canal de voz para usar este comando.',
            ephemeral: true 
        });
    }

    const queue = player.nodes.get(guild.id);

    switch (commandName) {
        case 'play':
            await interaction.deferReply();
            
            try {
                const query = options.getString('cancion');
                
                // Crear o obtener la cola
                const { track } = await player.play(member.voice.channel, query, {
                    nodeOptions: {
                        metadata: channel,
                        noEmitWhenAudioTracksAdd: false,
                        leaveOnStop: false,
                        leaveOnStopCooldown: 300000,
                        leaveOnEnd: false,
                        leaveOnEndCooldown: 300000,
                        leaveOnEmpty: true,
                        leaveOnEmptyCooldown: 60000,
                        skipOnNoStream: true,
                        // Configuraci√≥n anti-bloqueo
                        maxSize: 100,
                        maxHistorySize: 100,
                        volume: 50,
                        // Configuraci√≥n de b√∫squeda mejorada
                        searchResultsLimit: 1,
                        fallbackSearch: true
                    },
                    // Opciones de b√∫squeda con m√∫ltiples fuentes
                    searchEngine: 'auto', // Usar m√∫ltiples fuentes autom√°ticamente
                    requestedBy: interaction.user,
                    extractorRetryLimit: 3
                });

                const embed = createSuccessEmbed('üéµ Procesando...', 
                    `Buscando: **${query}**\n` +
                    'üõ°Ô∏è Sistema anti-bloqueo activo'
                );
                
                await interaction.followUp({ embeds: [embed] });

            } catch (error) {
                console.error('Error en comando play:', error);
                
                const isYouTubeError = error.message.includes('Sign in') || 
                                      error.message.includes('blocked') ||
                                      error.message.includes('unavailable');
                
                const errorEmbed = createErrorEmbed('‚ùå Error de b√∫squeda', 
                    isYouTubeError ? 
                    'üõ°Ô∏è YouTube bloque√≥ la b√∫squeda. Intenta:\n' +
                    '‚Ä¢ Esperar 1-2 minutos\n' +
                    '‚Ä¢ Usar un nombre m√°s espec√≠fico\n' +
                    '‚Ä¢ Probar con otra canci√≥n' :
                    'No se pudo encontrar la canci√≥n. Verifica el nombre o URL.'
                );
                
                await interaction.followUp({ embeds: [errorEmbed] });
            }
            break;

        case 'skip':
            if (!queue || !queue.isPlaying()) {
                return interaction.reply({ content: '‚ùå No hay m√∫sica reproduci√©ndose.', ephemeral: true });
            }

            queue.node.skip();
            await interaction.reply('‚è≠Ô∏è Canci√≥n saltada.');
            break;

        case 'stop':
            if (!queue) {
                return interaction.reply({ content: '‚ùå No hay m√∫sica reproduci√©ndose.', ephemeral: true });
            }

            queue.delete();
            await interaction.reply('‚èπÔ∏è M√∫sica parada y cola limpiada.');
            break;

        case 'pause':
            if (!queue || !queue.isPlaying()) {
                return interaction.reply({ content: '‚ùå No hay m√∫sica reproduci√©ndose.', ephemeral: true });
            }

            if (queue.node.isPaused()) {
                queue.node.resume();
                await interaction.reply('‚ñ∂Ô∏è M√∫sica reanudada.');
            } else {
                queue.node.pause();
                await interaction.reply('‚è∏Ô∏è M√∫sica pausada.');
            }
            break;

        case 'queue':
            if (!queue || queue.tracks.data.length === 0) {
                return interaction.reply({ content: 'üìù La cola est√° vac√≠a.', ephemeral: true });
            }

            let queueList = '';
            queue.tracks.data.slice(0, 10).forEach((track, index) => {
                queueList += `${index + 1}. **${track.title}** - ${track.author}\n`;
            });

            if (queue.tracks.data.length > 10) {
                queueList += `\n... y ${queue.tracks.data.length - 10} m√°s`;
            }

            const queueEmbed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üìù Cola de M√∫sica')
                .setDescription(queueList || 'La cola est√° vac√≠a')
                .addFields(
                    { name: 'üéµ Reproduciendo', value: queue.currentTrack?.title || 'Nada', inline: true },
                    { name: 'üìä Total en cola', value: `${queue.tracks.data.length}`, inline: true },
                    { name: 'üîÅ Loop', value: queue.repeatMode === 1 ? 'Activado' : 'Desactivado', inline: true }
                );

            await interaction.reply({ embeds: [queueEmbed] });
            break;

        case 'loop':
            if (!queue) {
                return interaction.reply({ content: '‚ùå No hay m√∫sica reproduci√©ndose.', ephemeral: true });
            }

            const newMode = queue.repeatMode === 1 ? 0 : 1;
            queue.setRepeatMode(newMode);
            await interaction.reply(`üîÅ Loop ${newMode === 1 ? 'activado' : 'desactivado'}.`);
            break;

        case 'shuffle':
            if (!queue || queue.tracks.data.length === 0) {
                return interaction.reply({ content: '‚ùå No hay canciones en la cola para mezclar.', ephemeral: true });
            }

            queue.tracks.shuffle();
            await interaction.reply('üîÄ Cola mezclada aleatoriamente.');
            break;

        case 'clear':
            if (!queue || queue.tracks.data.length === 0) {
                return interaction.reply({ content: '‚ùå La cola ya est√° vac√≠a.', ephemeral: true });
            }

            const clearedCount = queue.tracks.data.length;
            queue.tracks.clear();
            await interaction.reply(`üóëÔ∏è Se eliminaron ${clearedCount} canci√≥n(es) de la cola.`);
            break;

        case 'disconnect':
            if (!queue) {
                return interaction.reply({ content: '‚ùå El bot no est√° conectado a ning√∫n canal de voz.', ephemeral: true });
            }

            queue.delete();
            await interaction.reply('üëã Desconectado del canal de voz.');
            break;
    }
});

// Manejo de botones (mantener la misma l√≥gica pero adaptada)
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const queue = player.nodes.get(interaction.guildId);
    if (!queue) return;

    switch (interaction.customId) {
        case 'pause':
            if (queue.node.isPaused()) {
                queue.node.resume();
                await interaction.reply({ content: '‚ñ∂Ô∏è M√∫sica reanudada.', ephemeral: true });
            } else {
                queue.node.pause();
                await interaction.reply({ content: '‚è∏Ô∏è M√∫sica pausada.', ephemeral: true });
            }
            break;

        case 'skip':
            queue.node.skip();
            await interaction.reply({ content: '‚è≠Ô∏è Canci√≥n saltada.', ephemeral: true });
            break;

        case 'stop':
            queue.delete();
            await interaction.reply({ content: '‚èπÔ∏è M√∫sica parada y cola limpiada.', ephemeral: true });
            break;

        case 'loop':
            const newMode = queue.repeatMode === 1 ? 0 : 1;
            queue.setRepeatMode(newMode);
            await interaction.reply({ content: `üîÅ Loop ${newMode === 1 ? 'activado' : 'desactivado'}.`, ephemeral: true });
            break;
    }
});

client.on('error', error => {
    console.error('Error del cliente Discord:', error);
});

process.on('unhandledRejection', error => {
    console.error('Unhandled promise rejection:', error);
});

// Servidor HTTP (mantener igual)
const http = require('http');
const PORT = process.env.PORT || 3000;

const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
        status: 'Discord Music Bot Running',
        uptime: Math.floor(process.uptime()),
        timestamp: new Date().toISOString(),
        guilds: client.guilds ? client.guilds.cache.size : 0,
        extractors: player.extractors.size
    }));
});

server.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê HTTP Server running on port ${PORT}`);
});

console.log('üõ°Ô∏è Discord-player con sistema anti-bloqueo iniciado');
client.login(TOKEN);